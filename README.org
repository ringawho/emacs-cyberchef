* Introduction
[[https://github.com/gchq/CyberChef][CyberChef]] a web app for encryption, encoding, compression and data analysis.

This package brings the powerful capabilities of CyberChef into Emacs. You can store frequently-used CyberChef recipes in configuration file and apply them directly within the emacs for quick encryption and decryption of data. This eliminates the need to switch to a browser, streamlining workflows for handling sensitive information.

* Installation
1. Clone the repo and install dependencies.
   #+begin_src shell
     git clone https://github.com/ringawho/emacs-cyberchef.git
     cd emacs-cyberchef
     npm run init
   #+end_src
2. Add the following code to your configuration file ~/.emacs:
   #+begin_src emacs-lisp
     (add-to-list 'load-path "<path-to-emacs-cyberchef>")
     (require 'cyberchef)
     (cyberchef-start)
   #+end_src

* Recipe Configuration
#+begin_quote
Default configuration file is ~~/.emacs.d/cyberchef.json~.
#+end_quote

The configuration is a JSON array, where each element is an object. The objects have the following keys:
1. ~name~, is used select when ~M-x cyberchef~.
2. ~bake~, is cyberchef recipe. You can find this in CyberChef website (Save Recipe -> Clear Json).
3. ~text~, optional, is elisp expression (~text~ is selected text), it will used process selected text. Example: ~"(substring text 16)"~
4. ~args~, optional, is similar as ~text~, but it is json array, it will used when format recipe. Example: ~["(substring text 0 16)"]~
5. ~res~, optional, is elisp expression (~res~ is cyberchef result). Example: ~"(setq aes-key res)"~

** Simple Example
base64 and md5
#+begin_src json
  [
    {
      "name": "base64 example",
      "bake": [
        { "op": "To Base64",
          "args": ["A-Za-z0-9+/="] }
      ]
    },
    {
      "name": "md5 example",
      "bake": [
        { "op": "MD5",
          "args": [] }
      ]
    }
  ]
#+end_src

** Complex Example
First, execute "aes key" to get the AES key with selecting "qwe", then store it in the ~aes-key~ variable use the ~res~ configuration. After that, execute "aes encrypt" to encrypt selected text ("asdzxc") using ~aes-key~. Finally, you can get encrypted text: ~cTp/ite5+1fIDKG8ce3DXQ==~.

#+begin_src text
  qwe
  asdzxc
#+end_src

In ~aes encrypt~
1. ~text~: trim the selected text.
2. ~args~: get ~aes-key~ variable. Then using it when format ~bake~. Note there is a "%s" string in the args of "AES Encrypt" op.

#+begin_src json
  [
    {
      "name": "aes key",
      "bake": [
        { "op": "MD5",
          "args": [] }
      ],
      "res": "(setq aes-key res)"
    },
    [
      "name": "aes encrypt",
      "text": "(string-trim text)",
      "args": [ "aes-key" ],
      "bake": [
        { "op": "AES Encrypt",
          "args": [{ "option": "Hex", "string": "%s" }, { "option": "Hex", "string": "" }, "ECB", "Raw", "Raw", { "option": "Hex", "string": "" }] },
        { "op": "To Base64",
          "args": ["A-Za-z0-9+/="] }
      ]
    ]
  ]
#+end_src

* Notes
This package use cyberchef node API, so some Flow Control operations is unsupported.
